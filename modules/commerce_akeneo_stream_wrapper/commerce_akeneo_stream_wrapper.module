<?php

/**
 * @file
 * Provides a akeneo stream wrapper and file field integration.
 *
 * @todo Add a 'Akeneo URL' file field widget.
 */

/**
 * Stream wrapper type flag -- visible and readable
 * using akeneo files that act like local files.
 */
define('COMMERCE_AKENEO_STREAM_WRAPPER', STREAM_WRAPPERS_LOCAL | STREAM_WRAPPERS_READ | STREAM_WRAPPERS_VISIBLE);
define('COMMERCE_AKENEO_STREAM_WRAPPER_DEFAULT_TIMEOUT', 5);

require_once dirname(__FILE__) . '/commerce_akeneo_stream_wrapper.admin.inc';

/**
 * Implements hook_menu().
 */
function commerce_akeneo_stream_wrapper_menu() {
  $items = array();

  $items['file/add/akeneo'] = array(
    'title'           => 'Akeneo',
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('commerce_akeneo_stream_wrapper_file_add_form'),
    'access callback' => 'commerce_akeneo_stream_wrapper_media_browser_plugin_access',
    'type'            => MENU_LOCAL_TASK,
  );

  // Add image style generation paths for external URLs.
  if (module_exists('image')) {
    $wrappers       = file_get_commerce_akeneo_stream_wrappers();
    $directory_path = file_stream_wrapper_get_instance_by_scheme(file_default_scheme())->getDirectoryPath();
    $pos            = count(explode('/', $directory_path)) + 1;

    $item = array(
      'page callback'   => 'commerce_akeneo_stream_wrapper_image_style_deliver',
      'page arguments'  => array($pos, $pos + 1),
      'access callback' => TRUE,
      'type'            => MENU_CALLBACK,
      'file'            => 'commerce_akeneo_stream_wrapper.image.inc',
    );

    foreach (array_keys($wrappers) as $scheme) {
      $items[$directory_path . '/styles/%image_style/' . $scheme] = $item;
    }
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_akeneo_stream_wrapper_permission() {
  $permission = array();

  if (module_exists('media')) {
    $permission['add media from akeneo urls'] = array(
      'title'       => t('Add media from Akeneo URLs'),
      'description' => t('Add media from Akeneo URLs.'),
    );
  }

  return $permission;
}

/**
 * Implements hook_stream_wrappers().
 */
function commerce_akeneo_stream_wrapper_stream_wrappers() {
  $info['akeneo'] = array(
    'name'        => t('Akeneo URLs'),
    'class'       => 'DrupalAkeneoStreamWrapper',
    'description' => t('Akeneo files.'),
    'type'        => COMMERCE_AKENEO_STREAM_WRAPPER,
    'akeneo'      => TRUE,
  );

  return $info;
}

/**
 * Return a list of akeneo stream wrappers.
 */
function file_get_commerce_akeneo_stream_wrappers() {
  $wrappers = file_get_stream_wrappers(COMMERCE_AKENEO_STREAM_WRAPPER);

  foreach ($wrappers as $scheme => $wrapper) {
    if (empty($wrapper['akeneo'])) {
      unset($wrappers[$scheme]);
    }
  }

  return $wrappers;
}

/**
 * Check if a stream wrapper scheme is a akeneo stream wrapper.
 */
function file_is_scheme_akeneo($scheme) {
  $wrappers = file_get_commerce_akeneo_stream_wrappers();
  return isset($wrappers[$scheme]);
}

/**
 * Implements hook_file_url_alter().
 */
function commerce_akeneo_stream_wrapper_file_url_alter(&$uri) {
  $scheme   = file_uri_scheme($uri);
  $wrappers = file_get_commerce_akeneo_stream_wrappers();

  if ($scheme && isset($wrappers[$scheme]) && strpos($uri, "$scheme://styles/") === 0) {
    $uri = file_default_scheme() . '://' . file_uri_target($uri);
  }
}

/**
 * Copy of image_style_path() for use with akeneo images.
 *
 * When image_style_path() is give a file like 'http://example.com/image.png'
 * it is converted into 'http://styles/stylename/http/example.com/image.png'
 * which will fail image_style_deliver().
 */
function commerce_akeneo_stream_wrapper_image_style_path($style_name, $uri) {
  // Force the image style to be returned with the default file scheme, but
  // with the file's original scheme in the path.
  return file_default_scheme() . '://styles/' . $style_name . '/' . file_uri_scheme($uri) . '/' . file_uri_target($uri);
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Manually add support for the akeneo stream wrapper in file fields since
 * it is read-only.
 */
function commerce_akeneo_stream_wrapper_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  if ($form['#field']['type'] == 'file' || $form['#field']['type'] == 'image') {
    $form['field']['settings']['uri_scheme']['#description'] .= ' ' . t(
        'This only applies to uploaded files and not akeneo files.'
      );
  }
}

/**
 * Validation callback for akeneo URLs.
 */
function commerce_akeneo_stream_wrapper_validate_url($element, &$form_state) {
  $value = $element['#value'];

  // Normalize input values.
  $form_state['values']['url'] = preg_replace('/^http/i', 'akeneo', $value);
  $uri                         = preg_replace('/^akeneo/i', 'http', $value);

  if (!file_stream_wrapper_valid_scheme(file_uri_scheme($value))) {
    // Check that the scheme is supported.
    form_error(
      $element,
      t('Akeneo URLs with the %scheme scheme are not supported.', array('%scheme' => file_uri_scheme($value)))
    );
  }
  else {
    $form_state['#file'] = commerce_akeneo_stream_wrapper_file_create_by_uri($uri);
  }
}

/**
 * Load a file object by URI.
 *
 * @param string $uri
 *   A string containing the URI, path, or filename.
 *
 * @return mixed
 *   A file object, or FALSE if not found.
 */
function commerce_akeneo_stream_wrapper_file_load_by_uri($uri) {
  $uri   = file_stream_wrapper_uri_normalize($uri);
  $files = entity_load('file', FALSE, array('uri' => $uri));

  return !empty($files) ? reset($files) : FALSE;
}

/**
 * Helper function to assemble a new file entity object by URI.
 *
 * @param string $uri
 *   A string containing the URI, path, or filename.
 *
 * @return object
 *   File.
 */
function commerce_akeneo_stream_wrapper_file_create_by_uri($uri) {
  global $user;

  $uri = file_stream_wrapper_uri_normalize($uri);

  $media = new DrupalAkeneoStreamWrapper();
  $media->setUri($uri);

  if (!$details = $media->getDetails()) {
    form_error($element, t('Unable to fetch file from URL %uri, please check credentials.', array('%uri' => $uri)));
  }

  $file           = new stdClass();
  $file->fid      = NULL;
  $file->uri      = $uri;
  $file->filename = $details->originalFilename;
  $file->filemime = $details->mimeType;
  $file->uid      = $user->uid;
  $file->status   = FILE_STATUS_PERMANENT;
  $file->size     = $details->size;

  return $file;
}

/**
 * Implements hook_media_browser_plugin_info().
 */
function commerce_akeneo_stream_wrapper_media_browser_plugin_info() {
  $plugins['akeneo_file'] = array(
    'title'           => t('Akeneo URL'),
    'class'           => 'CommerceAkeneoStreamWrapperMediaBrowser',
    // Support for Media 1.x browser plugin API.
    '#title'          => t('Akeneo URL'),
    'access callback' => 'commerce_akeneo_stream_wrapper_media_browser_plugin_access',
  );

  return $plugins;
}

/**
 * Media 1.x browser plugin access callback.
 *
 * Duplicate of CommerceAkeneoStreamWrapperMediaBrowser::access().
 */
function commerce_akeneo_stream_wrapper_media_browser_plugin_access() {
  return user_access('administer files') || user_access('add media from akeneo urls');
}

/**
 * Implements hook_media_browser_plugin_view().
 */
function commerce_akeneo_stream_wrapper_media_browser_plugin_view($plugin_name, $params) {
  if ($plugin_name == 'akeneo_file') {
    if (commerce_akeneo_stream_wrapper_media_browser_plugin_access()) {
      $params += array('types' => array());
      $form = drupal_get_form('commerce_akeneo_stream_wrapper_file_add_form', $params);

      return array(
        '#title' => t('Akeneo URL'),
        'form'   => array($form),
      );
    }
  }

  return array();
}

/**
 * Provides a form for adding media items from akeneo URLs.
 *
 * @see commerce_akeneo_stream_wrapper_media_browser_form_submit()
 */
function commerce_akeneo_stream_wrapper_file_add_form($form, &$form_state, array $options = array()) {
  $form['url'] = array(
    '#type'             => 'textfield',
    '#title'            => 'URL',
    '#attributes'       => array('class' => array('media-add-from-akeneo-url')),
    // Maximum length of {file_managed}.uri.
    '#maxlength'        => 255,
    '#element_validate' => array('commerce_akeneo_stream_wrapper_validate_url'),
    '#required'         => TRUE,
  );

  // @todo Validate against file field allowed types.
  $form['#validators'] = array();

  $form['actions']           = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type'  => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}

/**
 * Save a file record based on a akeneo URL.
 *
 * @see commerce_akeneo_stream_wrapper_media_browser_form()
 * @see file_save()
 * @see DrupalAkeneoStreamWrapper
 */
function commerce_akeneo_stream_wrapper_file_add_form_submit($form, &$form_state) {
  $uri = $form_state['values']['url'];

  try {
    $file = commerce_akeneo_stream_wrapper_file_load_by_uri($uri);

    if (!$file) {
      $file = $form_state['#file'];
      file_save($file);
    }
  }
  catch (Exception $e) {
    form_set_error('url', $e->getMessage());

    return;
  }

  if (empty($file->fid)) {
    form_set_error('url', t('Unable to add file from URL %file.', array('%file' => $uri)));

    return;
  }
  else {
    $form_state['file'] = $file;
  }

  if (drupal_valid_path('file/' . $file->fid . '/edit')) {
    $destination = array('destination' => 'admin/content/file');

    if (isset($_GET['destination'])) {
      $destination = drupal_get_destination();
      unset($_GET['destination']);
    }

    $form_state['redirect'] = array('file/' . $file->fid . '/edit', array('query' => $destination));
  }
  else {
    $form_state['redirect'] = 'admin/content/file';
  }
}
