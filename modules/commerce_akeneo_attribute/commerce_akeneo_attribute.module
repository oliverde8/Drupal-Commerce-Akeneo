<?php

/**
 * @file
 */

// Classes and Interfaces.
require_once dirname(__FILE__) . '/includes/CommerceAkeneoAttributeInterface.inc';
require_once dirname(__FILE__) . '/includes/CommerceAkeneoAttributeAbstract.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function commerce_akeneo_attribute_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'commerce_akeneo') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_commerce_akeneo_attribute_mapping_info().
 */
function commerce_akeneo_attribute_commerce_akeneo_attribute_mapping_info() {
  $attributes['sku'] = array(
    'names' => array('sku'),
    'skip'  => TRUE,
  );

  $attributes['pictures'] = array(
    'match'        => '/^pictures_[0-9]+$/',
    'type'         => 'pim_akeneo_image',
    'field_name'   => 'pictures',
    'field_locked' => TRUE,
  );

  return $attributes;
}

/**
 * @param bool $refresh
 *
 * @return array
 */
function commerce_akeneo_attribute_mapping($refresh = FALSE) {
  $cid = 'commerce_akeneo:attribute_mapping';

  if (($cache = cache_get($cid)) && !$refresh) {
    return $cache->data;
  }

  $attributes = module_invoke_all('commerce_akeneo_attribute_mapping_info');

  // Add default properties.
  foreach ($attributes as $key => $attribute) {
    $attributes[$key] += array(
      'names'        => array(),
      'section'      => 'attribute',
      'skip'         => FALSE,
      'match'        => FALSE,
      'type'         => NULL,
      'field_name'   => NULL,
      'field_locked' => FALSE,
    );
  }

  drupal_alter('commerce_akeneo_attribute_mapping_info', $attributes);

  cache_set($cid, $attributes);

  return $attributes;
}

function commerce_akeneo_attribute_dispatch_by_fields($attributes) {
  $fields   = array();
  $mappings = commerce_akeneo_attribute_mapping();

  foreach ($attributes as $attribute) {
    $found = FALSE;

    foreach ($mappings as $mapping) {
      if (in_array($attribute['code'], $mapping['names']) ||
        (!empty($mapping['match']) && preg_match($mapping['match'], $attribute['code']))
      ) {
        $found = TRUE;

        if (!$mapping['skip'] && !is_null($mapping['field_name'])) {
          if (!isset($fields[$mapping['field_name']])) {
            $fields[$mapping['field_name']] = array(
              'field_name'   => $mapping['field_name'],
              'field_locked' => $mapping['field_locked'],
              'attributes'   => array(),
            );
          }

          $fields[$mapping['field_name']]['attributes'][$attribute['code']] = $attribute;
        }

        break;
      }
    }

    if (!$found) {
      $field_name = commerce_akeneo_get_machine_name($attribute['code'], 'field');

      $fields[$field_name] = array(
        'field_name'   => $field_name,
        'field_locked' => FALSE,
        'attributes'   => array($attribute['code'] => $attribute),
      );
    }
  }

  return $fields;
}

/**
 * @param string $family
 * @param string $section
 * @param string $code
 *
 * @return mixed
 */
function commerce_akeneo_attribute_load($family, $section, $code) {
  $result = db_select('commerce_akeneo_attribute', 't')
    ->fields('t')
    ->condition('family', $family)
    ->condition('section', $section)
    ->condition('code', $code)
    ->execute()
    ->fetchAssoc();

  if ($result) {
    $attribute = (array) $result;

    $attribute['settings'] = unserialize($attribute['settings']);

    return $attribute;
  }
  else {
    return NULL;
  }
}

/**
 * @param string $family
 * @param string $section
 * @param string $code
 *
 * @return array
 */
function commerce_akeneo_attribute_load_all($family = NULL, $section = NULL, $code = NULL) {
  $query = db_select('commerce_akeneo_attribute', 't')->fields('t');

  if (!is_null($family)) {
    $query->condition('family', $family);
  }

  if (!is_null($section)) {
    $query->condition('section', $section);
  }

  if (!is_null($code)) {
    $query->condition('code', $code);
  }

  $results = $query->execute()->fetchAllAssoc('aid');

  $attributes = array();

  foreach ($results as $pos => $result) {
    $attribute = (array) $result;

    $attribute['settings'] = unserialize($attribute['settings']);

    $attributes[] = $attribute;
  }

  return $attributes;
}

/**
 * @param array $attribute
 *
 * @return \DatabaseStatementInterface|int
 * @throws \Exception
 */
function commerce_akeneo_attribute_save(&$attribute) {
  // Check required arguments.
  if (!isset($attribute['family']) || !isset($attribute['code']) || !isset($attribute['type'])) {
    throw new \Exception('Invalid argument');
  }

  // Set default values.
  $attribute += array(
    'aid'        => NULL,
    'section'    => '',
    'label'      => $attribute['code'],
    'settings'   => array(),
    'checksum'   => '',
    'field_name' => '',
    'required'   => 0,
    'created'    => REQUEST_TIME,
    'changed'    => REQUEST_TIME,
  );

  // Serialize for database storing.
  $settings              = $attribute['settings'];
  $attribute['settings'] = serialize($attribute['settings']);

  $attribute['required'] = $attribute['required'] ? 1 : 0;

  if (empty($attribute['aid'])) {
    unset($attribute['aid']);

    $aid = db_insert('commerce_akeneo_attribute')
      ->fields(array_keys($attribute))
      ->values($attribute)
      ->execute();

    $attribute['aid'] = $aid;
  }
  else {
    unset($attribute['created']);

    db_update('commerce_akeneo_attribute')
      ->condition('aid', $attribute['aid'])
      ->fields($attribute)
      ->execute();
  }

  // Restore settings.
  $attribute['settings'] = $settings;

  return TRUE;
}

/**
 * @param string $family
 * @param string $section
 * @param string $code
 *
 * @return \DatabaseStatementInterface
 */
function commerce_akeneo_attribute_delete($family = NULL, $section = NULL, $code = NULL) {
  $query = db_delete('commerce_akeneo_attribute');

  $query->condition('family', $family);
  $query->condition('section', $section);
  $query->condition('code', $code);

  return $query->execute();
}

/**
 * Implements hook_commerce_akeneo_family_delete().
 */
function commerce_akeneo_attribute_commerce_akeneo_family_delete($family) {
  db_delete('commerce_akeneo_attribute')->condition('family', $family)->execute();
}

/**
 * Implements hook_field_delete_field().
 */
function commerce_akeneo_attribute_field_delete_field($field) {
  // Remove any attribute pointing at deleted $field.
  db_delete('commerce_akeneo_attribute')->condition('field_name', $field['field_name'])->execute();
}

/**
 * Implements hook_field_delete_instance().
 */
function commerce_akeneo_attribute_field_delete_instance($instance) {
  // Remove attribute pointing at deleted instance field.
  if ($instance['entity_type'] == 'commerce_product') {
    $query = db_select('commerce_akeneo_attribute', 'a');
    $query->join('commerce_akeneo_family', 'f', 'f.code = a.family');

    $query->fields('a', array('aid'))
      ->condition('f.product_type', $instance['bundle'])
      ->condition('a.field_name', $instance['field_name']);

    $attribute = $query->execute()->fetchAssoc();

    if ($attribute) {
      db_delete('commerce_akeneo_attribute')->condition('aid', $attribute['aid'])->execute();
    }
  }
}
