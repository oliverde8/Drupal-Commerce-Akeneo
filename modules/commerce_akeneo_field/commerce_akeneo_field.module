<?php

/**
 * @file
 * Commerce Akeneo Field Group module.
 */

const COMMERCE_AKENEO_FIELD_PREFIX = 'akeneo_';

require_once 'commerce_akeneo_field.api.inc';

/**
 * Implements hook_commerce_akeneo_family().
 */
function commerce_akeneo_field_commerce_akeneo_family($product_type, $request) {

  foreach ($request['attribute_groups'] as $attribute_group) {
    $attributes = isset($attribute_group['attributes']) ? $attribute_group['attributes'] : array();

    foreach ($attributes as $attribute) {
      try {
        // If missing an exception is thrown.
        $field_details = commerce_akeneo_field_plugin_field_details($attribute, $product_type['type']);
      }
      catch (Exception $e) {
        // Skip unsupported attribute type.
        continue;
      }

      // Handle special case like identifier: SKU.
      if (!$field_details) {
        continue;
      }

      // Shortcut.
      $field_name = $field_details['field']['field_name'];

      // Load field if exists.
      if (!$field = field_info_field($field_name)) {
        // Create field if missing.
        field_create_field($field_details['field']);
      }
      elseif ($field['type'] != $field_details['field']['type']) {
        throw new CommerceAkeneoException(t(
          'Field type for field "@field" has been changed: "@old" => "@new", which is not supported.',
          array(
            '@field' => $attribute['code'],
            '@old'   => $field['type'],
            '@new'   => $field_details['field']['type'],
          )
        ), 406);
      }
      else {
        // Update field properties.
        $field['translatable'] = $field_details['field']['translatable'];
        // TODO: remove for PROD environment.
        // $field['cardinality'] = $field_details['field']['cardinality'];
        // $field['settings'] = $field_details['field']['settings'];

        field_update_field($field);
      }

      // Create field instance if missing.
      $field_instance = field_info_instance('commerce_product', $field_name, $product_type['type']);

      if (!$field_instance) {
        field_create_instance($field_details['field_instance']);
      }
      else {
        $field_instance['label']       = $field_details['field_instance']['label'];
        $field_instance['description'] = $field_details['field_instance']['description'];
        $field_instance['required']    = $field_details['field_instance']['required'];
        // TODO: remove for PROD environment.
        // $field_instance['settings'] = $field_details['field_instance']['settings'];
        // $field_instance['widget']   = $field_details['field_instance']['widget'];

        if (isset($field_details['field_instance']['default_values'])) {
          $field_instance['default_values'] = $field_details['field_instance']['default_values'];
        }

        field_update_instance($field_instance);
      }
    }
  }
}

/**
 * Get the name of a field from attribute code.
 *
 * @param array $attribute
 *   Attribute from Akeneo.
 *
 * @return string
 *   Field name.
 */
function commerce_akeneo_field_get_name($attribute) {
  $field_name = COMMERCE_AKENEO_FIELD_PREFIX . $attribute['code'];

  drupal_alter('commerce_akeneo_field_get_name', $field_name, $attribute);

  return $field_name;
}

/**
 * Get the label of a field from attribute code.
 *
 * @param array $attribute
 *   Attribute from Akeneo.
 *
 * @return string
 *   Field label.
 */
function commerce_akeneo_field_get_label($attribute) {
  $field_label = isset($attribute['labels']) ? reset($attribute['labels']) : drupal_ucfirst($attribute['code']);

  drupal_alter('commerce_akeneo_field_get_label', $field_label, $attribute);

  return $field_label;
}

/**
 * Load and returns the list of supported attribute types.
 *
 * @return array
 *   List.
 */
function commerce_akeneo_field_attributes_list() {
  $attributes = & drupal_static(__FUNCTION__, NULL);

  if (is_null($attributes)) {
    $attributes = array();

    foreach (module_implements('commerce_akeneo_field_plugins_info') as $module) {
      $function = $module . '_commerce_akeneo_field_plugins_info';
      $infos    = $function();

      foreach ($infos as $attribute => $info) {
        $info['module']         = $module;
        $attributes[$attribute] = $info;
      }
    }

    drupal_alter('commerce_akeneo_field_plugins_info', $attributes);
  }

  return $attributes;
}

/**
 * Load and returns field details for an attribute.
 *
 * @param array  $attribute
 *   Attribute.
 * @param string $bundle
 *   Bundle.
 *
 * @return array
 *   Attribute details.
 */
function commerce_akeneo_field_plugin_field_details($attribute, $bundle) {
  $field_name  = commerce_akeneo_field_get_name($attribute);
  $field_label = commerce_akeneo_field_get_label($attribute);

  $plugin = commerce_akeneo_field_load_plugin($attribute['type']);

  return $plugin->getFieldDetails($attribute, $bundle, $field_name, $field_label);
}

/**
 * Load the plugin and return it.
 *
 * @param string $plugin_name
 *   Plugin name.
 *
 * @return CommerceAkeneoFieldPluginInterface
 *   Plugin.
 *
 * @throws CommerceAkeneoException
 * @throws Exception
 */
function commerce_akeneo_field_load_plugin($plugin_name) {
  $instances = & drupal_static(__FUNCTION__, array());

  if (!isset($instances[$plugin_name])) {
    $plugins = commerce_akeneo_field_attributes_list();

    if (isset($plugins[$plugin_name]) && $plugin = $plugins[$plugin_name]) {
      if (isset($plugin['file']) && $plugin['file']) {
        if (isset($plugin['file path']) && $plugin['file path']) {
          $file = DRUPAL_ROOT . '/' . $plugin['file path'] . '/' . $plugin['file'];
        }
        else {
          $file = DRUPAL_ROOT . '/' . drupal_get_path('module', $plugin['module']);
          $file .= '/' . $plugin['file'];
        }

        if (is_file($file)) {
          require_once $file;

          $class    = $plugin['class'];
          $instance = new $class();

          // Add instance to static stack.
          $instances[$plugin_name] = $instance;

          return $instance;
        }
        else {
          throw new Exception('Missing plugin file.');
        }
      }
    }

    throw new CommerceAkeneoException(
      t('Attribute type not supported: "@type".', array('@type' => $plugin_name)),
      406
    );
  }

  return $instances[$plugin_name];
}

/**
 * Implements hook_commerce_akeneo_attributes_info().
 */
function commerce_akeneo_field_commerce_akeneo_field_plugins_info() {
  return array(
    'pim_catalog_date'         => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogDate',
      'file'  => 'plugins/pim_catalog_date.inc',
    ),
    'pim_catalog_number'       => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogNumber',
      'file'  => 'plugins/pim_catalog_number.inc',
    ),
    'pim_catalog_text'         => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogText',
      'file'  => 'plugins/pim_catalog_text.inc',
    ),
    'pim_catalog_textarea'     => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogTextarea',
      'file'  => 'plugins/pim_catalog_textarea.inc',
    ),
    'pim_catalog_identifier'   => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogIdentifier',
      'file'  => 'plugins/pim_catalog_identifier.inc',
    ),
    'pim_catalog_simpleselect' => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogSimpleselect',
      'file'  => 'plugins/pim_catalog_simpleselect.inc',
    ),
    'pim_catalog_multiselect'  => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogMultiselect',
      'file'  => 'plugins/pim_catalog_multiselect.inc',
    ),
    'pim_catalog_boolean'      => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogBoolean',
      'file'  => 'plugins/pim_catalog_boolean.inc',
    ),
    'pim_catalog_metric'       => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogMetric',
      'file'  => 'plugins/pim_catalog_metric.inc',
    ),
    'pim_catalog_file'         => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogFile',
      'file'  => 'plugins/pim_catalog_file.inc',
    ),
    'pim_catalog_image'        => array(
      'class' => 'CommerceAkeneoFieldPluginPimCatalogImage',
      'file'  => 'plugins/pim_catalog_image.inc',
    ),
  );
}
