<?php

/**
 * @file
 * Module file for Commerce Akeneo module.
 */

require_once dirname(__FILE__) . '/includes/CommerceAkeneoFieldInterface.inc';
require_once dirname(__FILE__) . '/includes/CommerceAkeneoException.inc';

require_once 'commerce_akeneo.ctools.inc';
require_once 'commerce_akeneo.api.inc';
require_once 'commerce_akeneo.services.inc';

/**
 * Implements hook_ctools_plugin_api().
 */
function commerce_akeneo_ctools_plugin_api($module, $api) {
  if ($module == 'services' && $api == 'services') {
    return array('version' => 3);
  }
}

/**
 * Implements hook_menu().
 */
function commerce_akeneo_menu() {
  $items = array();

  $items['admin/config/services/akeneo'] = array(
    'title'            => 'Commerce Akeneo Connector',
    'description'      => 'Configure the Akeneo Connector settings for Drupal Commerce.',
    'parent'           => 'admin/config/services',
    'page callback'    => 'commerce_akeneo_settings_page',
    'file'             => 'commerce_akeneo.admin.inc',
    'access arguments' => array('administer commerce akeneo'),
    'type'             => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function commerce_akeneo_permission() {
  return array(
    'administer commerce akeneo'                => array(
      'title'       => t('Administer Commerce Akeneo'),
      'description' => t('Perform administration for Commerce Akeneo'),
    ),
    'resource product commerce akeneo'          => array(
      'title'       => t('Service: %service', array('%service' => 'product')),
      'description' => t("Save a product based on it's SKU (create/update)."),
    ),
    'resource association commerce akeneo'          => array(
      'title'       => t('Service: %service', array('%service' => 'association')),
      'description' => t("Store product association."),
    ),
    'resource group commerce akeneo'          => array(
      'title'       => t('Service: %service', array('%service' => 'group')),
      'description' => t("Store product group."),
    ),
    'resource family commerce akeneo'           => array(
      'title'       => t('Service: %service', array('%service' => 'family')),
      'description' => t('Synchronize families (product variant).'),
    ),
    'resource category commerce akeneo'         => array(
      'title'       => t('Service: %service', array('%service' => 'category')),
      'description' => t('Synchronize categories.'),
    ),
    'resource attribute option commerce akeneo' => array(
      'title'       => t('Service: %service', array('%service' => 'attribute option')),
      'description' => t('Synchronize attributes options (taxonomies).'),
    ),
  );
}

/**
 * Generate a new vocabulary machine name.
 *
 * @param string $code
 *   Akeneo code.
 * @param string $type
 *   Code (category|option|field|product).
 *
 * @return string
 *   Machine name.
 *
 * @throws Exception
 */
function commerce_akeneo_get_machine_name($code, $type = NULL) {
  if ($type == 'category') {
    $machine_name = variable_get('commerce_akeneo_prefix_category', '') . $code;
  }
  elseif ($type == 'option') {
    $machine_name = variable_get('commerce_akeneo_prefix_option', '') . $code;
  }
  elseif ($type == 'field') {
    $machine_name = variable_get('commerce_akeneo_prefix_field', '') . $code;
  }
  elseif ($type == 'field_category') {
    $machine_name = variable_get('commerce_akeneo_prefix_field_category', '') . $code;
  }
  elseif ($type == 'field_association') {
    $machine_name = variable_get('commerce_akeneo_prefix_field_association', '') . $code;
  }
  elseif ($type == 'group') {
    $machine_name = variable_get('commerce_akeneo_prefix_group', '') . $code;
  }
  elseif ($type == 'product') {
    $machine_name = variable_get('commerce_akeneo_prefix_product', '') . $code;
  }
  else {
    throw new \Exception(t('Unsupported type @type for machine name.', array('@type' => $type)));
  }

  drupal_alter('commerce_akeneo_get_machine_name', $machine_name, $code, $type);

  // Match sql schema restrictions of 32 chars length.
  // Shouldn't occur if correctly setup in Akeneo.
  if (drupal_strlen($machine_name) > 32) {
    $machine_name_short = substr(drupal_strtolower($machine_name), 0, 32);

    $message = 'Machine name %machine_name has been truncated to 32 chars. ' .
      'The shorten name %machine_name_short can smash another machine name. ' .
      'You should use smaller ones directly in Akeneo (code: %code, type: %type)';

    $arguments = array(
      '%machine_name_short' => $machine_name_short,
      '%machine_name'       => $machine_name,
      '%type'               => $type,
      '%code'               => $code,
    );

    watchdog('akeneo', $message, $arguments, WATCHDOG_ALERT);
    drupal_set_message(t('Machine name %machine_name has been truncated to 32 chars.', array('%machine_name' => $machine_name)), 'warning');

    $machine_name = $machine_name_short;
  }

  return $machine_name;
}

/**
 * Convert locale to language.
 *
 * @param string $locale
 *   Locale to be converted.
 *
 * @return mixed
 *   Language.
 */
function commerce_akeneo_locale_to_language($locale) {
  $languages = &drupal_static(__FUNCTION__);

  if (!isset($languages[$locale])) {
    if ($locale != LANGUAGE_NONE) {
      list($language) = explode('_', $locale);
    }
    else {
      $language = LANGUAGE_NONE;
    }

    drupal_alter('commerce_akeneo_locale_to_language', $language, $locale);

    $languages[$locale] = $language;
  }

  return $languages[$locale];
}

/**
 * @param array  $values
 * @param string $language
 * @param bool   $fallback
 *
 * @return mixed
 */
function commerce_akeneo_get_language($values, $language = NULL, $fallback = TRUE) {
  if (empty($values)) {
    return FALSE;
  }

  if (is_null($language)) {
    $language = language_default('language');
  }

  foreach ($values as $locale => $value) {
    if (commerce_akeneo_locale_to_language($locale) == $language) {
      return filter_xss($value);
    }
  }

  if (isset($values[LANGUAGE_NONE])) {
    return filter_xss($values[LANGUAGE_NONE]);
  }

  if ($fallback && count($values)) {
    return current($values);
  }

  return FALSE;
}

/**
 * Instance and create a generic queue.
 *
 * @param string $name
 *   Name.
 * @param bool   $create
 *   Create the queue.
 *
 * @return \DrupalReliableQueueInterface
 */
function commerce_akeneo_queue_load($name, $create = FALSE) {
  $cid = array(
    'commerce_akeneo',
    drupal_strtolower($name),
  );

  /** @var DrupalReliableQueueInterface $queue */
  $queue = DrupalQueue::get(implode(':', $cid));

  if ($create) {
    $queue->createQueue();
  }

  return $queue;
}
